---
title: "R Notebook"
output: html_notebook
---

***Genetic Algorithms***


```{r packages, echo=FALSE}
library(dplyr)
library(ggplot2)
library(reshape2)
library(lubridate)
library(tidyverse)
library(geodist)
library(countrycode)
library(geodist)
library(dplyr)
library(maps)
library(ggmap)
library(igraph)
library(geosphere)
library(GNAR)
library(MCMCpack)
library(glue)
library(GA)
```

```{r data, echo = FALSE}
setwd('/Users/harrymccarthy/Documents/Imperial/Summer_Project/R Code')
unemployment_data <- read.csv('OECD_monthly_unemployment.csv')
unemployment_ts <- read.csv('unemployment_ts.csv')
unemployment_vts <- ts(subset(unemployment_ts, select = -Month_Year))
load("MST_Distance_Networks.RData")
head(unemployment_ts)
```

Need to generate a population of chromosomes, these will be of length 666 and correspond to the indices of the flattened upper triangular part of the adjacency matrix.

These need to ignore those generated by the MST

```{r}
reconstruct_symmetric_matrix <- function(upper_entries, n) {
  mat <- matrix(0, nrow = n, ncol = n)
  
  # Populate upper entries row by row
  start_idx <- 1
  for (i in 1:(n-1)) {
    end_idx <- start_idx + (n - i - 1)
    mat[i, (i+1):n] <- upper_entries[start_idx:end_idx]
    start_idx <- end_idx + 1
  }
  
  # Fill lower triangle (copy from upper triangle)
  mat[lower.tri(mat)] <- t(mat)[lower.tri(mat)]
  
  # Diagonal elements are zero
  diag(mat) <- 0
  
  return(mat)
}


reconstruct_symmetric_matrix(c(1,0, 1,0,0,1, 1, 0, 1, 0), 5)
```

```{r}
mat <- matrix(1:16, nrow = 4)
mat
```

```{r flatten_upper_tri_rowwise, echo = FALSE}
flatten_upper_triangular_rowwise <- function(mat, n) {
  # Initialize an empty vector to store upper triangular elements row-wise
  upper_tri_elements <- numeric(0)
  
  # Loop through each row and column to extract upper triangular elements
  for (i in 1:(n-1)) {
    for (j in (i+1):n) {
      upper_tri_elements <- c(upper_tri_elements, mat[i, j])
    }
  }
  
  # Return the vector of upper triangular elements row-wise
  return(upper_tri_elements)
}

# Example matrix
mat <- matrix(1:16, nrow = 4)

# Call the function
upper_tri_elements <- flatten_upper_triangular_rowwise(mat, 4)

# Output the vector of upper triangular elements row-wise
upper_tri_elements

```

Flattening the MST_37 and finding the length of chromosomes

```{r flaten_MST_37}
flat_MST_37 <- flatten_upper_triangular_rowwise(MST_37, 37)
chrom_length <- n_nodes*(n_nodes -1)*0.5 - length(which(flat_MST_37 ==1)) 
chrom_length
```

Challenge 1

I want to always have the MST as part of the chromosome

Should I only search over non MST genes and then reintroduce the MST genes in the correct order afterwards? 

original_list is a binary vector of length n
new_list is a binary vector of length n minus the number of ones in original list
new_list should be of equal length as the number of zeros in original list
function should replace all the zeros in original list with the elements of new_list
resulting list should be the same length as original_list but will have some ones in place of the zeros it had originally

```{r merge_helper, echo = FALSE}

merge_chromosomes<- function(original_list, new_list){
  
  # Validate input lengths
  if (length(new_list) != sum(original_list == 0)) {
    stop("new_list must be of length equal to the number of zeros in original_list")
  }
  
  # Find indices where original_list is 0
  zero_indices <- which(original_list == 0)
  
  # Replace zeros with elements from new_list
  original_list[zero_indices] <- new_list

  return(original_list)
}

# Example
original_list <- c(1, 0, 1, 0, 0, 1)
new_list <- c(1, 0, 1)

merge_chromosomes(original_list, new_list)
```

```{r fitness_function}
# Evaluates the fitness of a chromosome
fitness <- function(chromosome){
  
  # # String to binary vector
  # bin_vec <- as.integer(strsplit(chromosome, "")[[1]])
  
  # Merging with original fully connected list
  
  bin_vec <- merge_chromosomes(flat_MST_37, chromosome)
  
  # Reconstruct the network
  net <- as.GNARnet(reconstruct_symmetric_matrix(bin_vec, 37))

  # Fit GNAR on within sample data
  fit <- GNARfit(vts = unemployment_vts[1:275,], net = net, alphaOrder = 1, betaOrder = c(2), globalalpha = TRUE)

  # Find next step ahead prediction error
  neg_error <- -1*(sum(unemployment_vts[276,]-predict(fit))^2)

  return(neg_error)

}
```

Implementing the Genetic Algorithm with on constraints on the number of edge additions

```{r ga_no_penalisation}
# Define the GA parameters
population_size <- 100
number_of_bits <- 630
crossover_prob <- 0.8
mutation_prob <- 0.01
max_generations <- 100

# Custom binary GA
binaryGA <- ga(
  type = "binary",
  fitness = fitness,
  nBits = number_of_bits,
  popSize = population_size,
  pcrossover = crossover_prob,
  pmutation = mutation_prob,
  maxiter = max_generations,
  run = max_generations,
  monitor = TRUE
)

# Output the best solution
summary(binaryGA)
cat("Best solution:", binaryGA@solution, "\n")
cat("Best fitness:", binaryGA@fitnessValue, "\n")
```


Plotting the generated network. Network is extremely connected. Could we do this with a multitude of economic variables?

```{r plot_ga_sol_no_penalisation, echo = FALSE}
best_sol <- as.numeric(binaryGA@solution)
final_sol <- reconstruct_symmetric_matrix(merge_chromosomes(flat_MST_37, best_sol), 37)
rownames(final_sol) <- colnames(unemployment_vts)
colnames(final_sol) <- colnames(unemployment_vts)
plot_from_matrix(final_sol, 'Genetic Algorithm Solution - No Edge Constraints')
```
Confirming prediction error from the no edge constraint network. Very low - concerning? 

```{r confirming_pred_error_no_constraints, echo = FALSE}

# Reconstruct the network
net <- as.GNARnet(final_sol)
# Fit GNAR on within sample data
fit <- GNARfit(vts = unemployment_vts[1:275,], net = net, alphaOrder = 1, betaOrder = c(2), globalalpha = TRUE)
sum(unemployment_vts[276,]-predict(fit))^2 

```

Now I want to add constraints on the number of binary genes that can be added.

One solution is to add a penalise the fitness value if the number of edges is not equal to the target number of edge additions

Below I define the fitness function with the penalty term

Does the number of additional edges need to be hard coded here?

```{r fitness_penalised}

# Evaluates the fitness of a chromosome
fitness_penalised <- function(chromosome){
  
  # Merging with original fully connected list
  
  bin_vec <- merge_chromosomes(flat_MST_37, chromosome)
  
  # Reconstruct the network
  net <- as.GNARnet(reconstruct_symmetric_matrix(bin_vec, 37))

  # Fit GNAR on within sample data
  fit <- GNARfit(vts = unemployment_vts[1:275,], net = net, alphaOrder = 1, betaOrder = c(2), globalalpha = TRUE)

  # Find next step ahead prediction error
  if(abs(sum(chromosome)) > 26){
    penalty <- 10^5*(abs(sum(chromosome) - 26))
  }
  else{
    penalty <- 0
  }
  
  neg_error <- -1*(sum(unemployment_vts[276,]-predict(fit))^2) - penalty

  return(neg_error)

}

```


Implementing the Genetic Algorithm with a penalty term on the number of additional edges over the MST

```{r ga_w_penalisation}
# Define the GA parameters
population_size <- 100
number_of_bits <- 630
crossover_prob <- 0.8
mutation_prob <- 0.01
max_generations <- 10

# Custom binary GA
binaryGA <- ga(
  type = "binary",
  fitness = fitness_penalised,
  nBits = number_of_bits,
  popSize = population_size,
  pcrossover = crossover_prob,
  pmutation = mutation_prob,
  maxiter = max_generations,
  run = max_generations,
  monitor = TRUE
)

# Output the best solution
summary(binaryGA)
cat("Best solution:", binaryGA@solution, "\n")
cat("Best fitness:", binaryGA@fitnessValue, "\n")
```



```{r plot_ga_sol_w_penalisation, echo = FALSE}
best_sol <- as.numeric(binaryGA@solution)
sol_w_penalistationn <- reconstruct_symmetric_matrix(merge_chromosomes(flat_MST_37, best_sol), 37)
rownames(sol_w_penalistationn) <- colnames(unemployment_vts)
colnames(sol_w_penalistationn) <- colnames(unemployment_vts)
plot_from_matrix(sol_w_penalistationn, 'Genetic Algorithm Solution w/ Penalisation')
```


Issue above is that the algorithm  is rarely generating networks less of less than 26 additional edges, so all the networks produced are subjected to the penalising factor

***Alternative Approach***

We can write custom functions to intialisation, mutation, crossover and suggestion functions to the GA to ensure that only chromosomes of k edges are generated to begin with. 

*Custom Initialisation*

```{r custom_initialisation}
initializePopulation <- function(object, n, ...) {
  k <- 26 # Number of ones
  popSize <- object@popSize
  nBits <- object@nBits
  
  # Ensure k is not greater than nBits
  if (k > nBits) {
    stop("The number of ones (k) cannot be greater than the number of bits (nBits).")
  }
  
  population <- matrix(0, nrow = popSize, ncol = nBits) # Matrix to hold the binary vectors
  
  # For each member of the initial population, k bits are randomly sampled and set equal to one
  for (i in 1:popSize) {
    ones_positions <- sample(1:nBits, k)
    population[i, ones_positions] <- 1
  }
  
  return(population)
}
```


```{r init_suggestion}

# Set parameters
nRows <- 100    # Number of individuals
nCols <- 630    # Number of bits per individual
nOnes <- 26     # Number of ones in each individual

# Function to create a row with exactly `nOnes` ones and the rest zeros
create_row <- function(nCols, nOnes) {
  row <- c(rep(1, nOnes), rep(0, nCols - nOnes))
  sample(row)  # Shuffle the row
}

# Create the initial population matrix
set.seed(123)  # For reproducibility
init_suggestion <- t(replicate(nRows, create_row(nCols, nOnes)))

# Verify the matrix
apply(init_suggestion, 1, sum)  # Check if each row has exactly 26 ones
```
*Custom Crossover*

object\@population contains all the solutions in the current generation

```{r custom_crossover}


customCrossover <- function(object, parents, ...) {
  k <- 26
  nBits <- object@nBits
  parents <- object@population[parents, , drop = FALSE] 
  children <- matrix(0, nrow = 2, ncol = nBits) # Matrix to store children
  fitnessChildren <- rep(NA, 2)
  
  crossover_point <- sample(1:(nBits-1), 1) # Crossover point is randomly selected 
  
  # Two offspring are created from the parents
  children[1,] <- c(parents[1,1:crossover_point], parents[2,(crossover_point+1):nBits])
  children[2,] <- c(parents[2,1:crossover_point], parents[1,(crossover_point+1):nBits])
  
  # If the generated chromosome doesnt have k edges, here we randomly add or remove edges to bring the total to k
  
  for (i in 1:2) {
    num_ones <- sum(children[i,])
    if (num_ones > k) {
      # Remove excess ones
      ones_positions <- which(children[i,] == 1)
      remove_positions <- sample(ones_positions, num_ones - k)
      children[i, remove_positions] <- 0
    } else if (num_ones < k) {
      # Add missing ones
      zero_positions <- which(children[i,] == 0)
      add_positions <- sample(zero_positions, k - num_ones)
      children[i, add_positions] <- 1 
      
    }
  }

  list(children = children, fitness = fitnessChildren)
}

```


*Custom Mutation*


```{r custom_mutation}
customMutation <- function(object, parent, ...) {
  k <- 26
  nBits <- object@nBits
  child <- object@population[parent, , drop = FALSE]
  
  # Perform mutation
  mutation_points <- sample(1:nBits, 2) # Randomly selecting mutation points 
  child[mutation_points] <- 1 - child[mutation_points]
  
  num_ones <- sum(child)
  
  # Correcting to desired number of genes
  
  if (num_ones > k) {
    # Remove excess ones
    ones_positions <- which(child == 1)
    remove_positions <- sample(ones_positions, num_ones - k)
    child[remove_positions] <- 0
  } else if (num_ones < k) {
    # Add missing ones
    zero_positions <- which(child == 0)
    add_positions <- sample(zero_positions, k - num_ones)
    child[add_positions] <- 1
  }
  
  child
}
```


Now implementing the GA with the custom functions


```{r ga_custom}

# Define the GA parameters
population_size <- 100
number_of_bits <- 630
crossover_prob <- 0.8
mutation_prob <- 0.01
max_generations <- 100 



# Custom binary GA    
binaryGA <- ga(
  type = "binary",
  fitness = fitness,
  nBits = number_of_bits, 
  popSize = population_size,
  maxiter = max_generations,
  run = max_generations,
  pmutation = mutation_prob,
  pcrossover = crossover_prob,
  suggestions = init_suggestion,
  crossover = customCrossover,
  mutation = customMutation,
  monitor = TRUE
)


# Output the best solution
summary(binaryGA)
cat("Best solution:", binaryGA@solution, "\n")
cat("Best fitness:", binaryGA@fitnessValue, "\n")

```

```{r custom_ga}
plot(binaryGA, main = 'Constrained GA Evolution')
```

```{r plot_ga__custom_sol, echo = FALSE}
best_custom_sol <- as.numeric(binaryGA@solution)
final_custom_sol <- reconstruct_symmetric_matrix(merge_chromosomes(flat_MST_37, best_custom_sol), 37)

rownames(final_custom_sol) <- colnames(unemployment_vts)
colnames(final_custom_sol) <- colnames(unemployment_vts)
plot_from_matrix(final_custom_sol, 'Custom Genetic Algorithm Solution')
```

Confirming prediction error

```{r confirming_pred_error_custom, echo = FALSE}
# Reconstruct the network
net <- as.GNARnet(final_custom_sol)
# Fit GNAR on within sample data
fit <- GNARfit(vts = unemployment_vts[1:275,], net = net, alphaOrder = 1, betaOrder = c(2), globalalpha = TRUE)
sum(unemployment_vts[276,]-predict(fit))^2 
```

Need to ensure final sol is connecting the right countries in the graph

Nice results
- Canada stays only connected to US and Iceland, these were its MST connections
- Likewise for Chile to Colombia
- Greece picked up many European

Curious results
Denmark - Bulgaria
Denmark - Ireland
Denmark  - Slovakia

Estonia - Great Britain
Estonia - Sweden

Finland  - Spain

Iceland - Portugal

Strange connections;
Australia - Turkey
Costa Rica - Lithuania
Finland - Korea
Colombia - Turkey
Japan - Luxembourg
Japan - Slovenia

Seems  like some of the countries missing data could be caausing strange results

```{r}
final_custom_sol
```
